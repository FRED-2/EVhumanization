#!/usr/local/bin/python2.7
# encoding: utf-8

import sys
import argparse
import ConfigParser
from Bio import AlignIO
from Bio import SeqIO

from utilities.ev_couplings_v4 import EVcouplings
from abstract_deimmu_prep import AbstractDeimmuPreparation


class AntibodyDeimmuPreparation(AbstractDeimmuPreparation):
    """Preparation and generation of input files used to de-immunize
    an antibody sequence, i.e. allowing only backmutations.

    Attributes:
        wildtype -- wildtype to be deimmunized
        num_mutations -- number of allowed mutations
        epitope_length -- length of an epitope
        allele_coll -- collection of alleles
        excluded_pos -- list of positions not allowed to be mutated
        ignored_pos -- list of positions ignored in calculation
        possible_mutations -- list of possible amino acid substitutions for each position
        hi -- his relevant for the calculation,
              as dictionary: key = (position, residue), value = hi value
        eij_indices -- list of eij indices relevant for the calculation
        eij -- eijs relevant for the calculation,
               as dictionary: key = (position 1, position 2, residue 1, residue 2), value = eij value
    """

    def __init__(self, config, alignment, ev_couplings, source_seq):
        super(AntibodyDeimmuPreparation, self).__init__(config, alignment, ev_couplings)
        self.set_possible_mutations(source_seq)
        self.extract_ev_paras(ev_couplings)

    def set_possible_mutations(self, source_seq):
        """
            For each wildtype residue generate a set of possible
            amino acid substitutions.
        """
        print 'Possible mutations:'
        mapping = self.wildtype.map_to_seq(source_seq.upper())
        self.possible_mutations = [set(res) for res in self.wildtype.sequence]
        for i, muts in enumerate(self.possible_mutations):
            if i not in self.excluded_pos and i not in self.ignored_pos:
                muts.add(source_seq[mapping[i]])
            print muts


def init_parameters(args):
    config = ConfigParser.ConfigParser()
    config.read(args.config)
    alignment = AlignIO.read(args.alignment, 'fasta')
    ev_couplings = EVcouplings(args.eij)
    with open(args.source, 'rU') as source_file:
        source_record = SeqIO.read(source_file, 'fasta')
    return config, alignment, ev_couplings, str(source_record.seq).upper()


def command_line():
    parser = argparse.ArgumentParser(
        description='Preparation and generation of input files ' +
                    'used to de-immunize an amino acid sequence')
    parser.add_argument('--config', '-c', required=True,
                        help='Config File')
    parser.add_argument('--eij', '-e', required=True,
                        help='Eij File')
    parser.add_argument('--alignment', '-a', required=True,
                        help='The complete alignment generated by EVFold with upper and lower letters. ' +
                             'The sequence to be deimmunized must be the first in the alignment.')
    parser.add_argument('--source', '-s', required=True,
                        help='Sequence used as the source of backmutation residues')
    parser.add_argument('--out', '-o', required=True,
                        help='The output file of the data model (in AMPL/GMPL) format')
    parser.add_argument('--model', '-m', required=True, nargs=2,
                        help='The ILP model files in MathProg (first argument: imm, second argument: en)')
    args = parser.parse_args()

    deimmu = AntibodyDeimmuPreparation(*init_parameters(args))
    deimmu.to_data_file(args.out)
    deimmu.generate_lp_files(args.out, args.model)


if __name__ == '__main__':
    command_line()
