#!/usr/local/bin/python2.7
# encoding: utf-8

import sys
import argparse
import ConfigParser
from Bio import AlignIO
from Bio.Align.AlignInfo import SummaryInfo

from ev_couplings_v4 import EVcouplings
from utilities.abstract_deimmu_prep import AbstractDeimmuPreparation

class DeimmuPreparation(AbstractDeimmuPreparation):
    """Preparation and generation of input files used to de-immunize an amino acid sequence.

    Attributes:
        wildtype -- wildtype to be deimmunized
        num_mutations -- number of allowed mutations
        epitope_length -- length of an epitope
        allele_coll -- collection of alleles
        excluded_pos -- list of positions not allowed to be mutated
        ignored_pos -- list of positions ignored in calculation
        possible_mutations -- list of possible amino acid substitutions for each position
        hi -- his relevant for the calculation,
              as dictionary: key = (position, residue), value = hi value
        eij_indices -- list of eij indices relevant for the calculation
        eij -- eijs relevant for the calculation,
               as dictionary: key = (position 1, position 2, residue 1, residue 2), value = eij value
    """

    def __init__(self, config, alignment, ev_couplings):
        super(DeimmuPreparation, self).__init__(config, alignment, ev_couplings)
        self.set_possible_mutations(alignment, float(config.get('generel', 'frequency_thresh')))
        self.extract_ev_paras(ev_couplings)

    def set_possible_mutations(self, alignment, freq_thresh):
        """
            For each wildtype residue generate a set of possible
            amino acid substitutions.
        """
        print 'Possible mutations:'

        self.possible_mutations = [None]*len(self.wildtype.sequence)
        for i in set(range(len(self.wildtype.sequence))) - self.wildtype.epitope_pos:
            self.possible_mutations[i] = set(self.wildtype.sequence[i])

        aln_summ = SummaryInfo(alignment)
        all_letters = aln_summ._get_all_letters()
        for char in ['.','-']:
            all_letters = all_letters.replace(char, '')
        for j in self.wildtype.epitope_pos:
            freq = aln_summ._get_letter_freqs(j, aln_summ.alignment._records, all_letters, ['.','-'])
            tmp = set()
            if j not in self.excluded_pos and j not in self.ignored_pos:
                tmp = set([aa.upper() for aa,fr in freq.items() if fr > freq_thresh and aa not in ['-','.','X','x']])
            if self.wildtype.sequence[j] not in tmp:
                tmp.add(self.wildtype.sequence[j])
            self.possible_mutations[j] = tmp
            print self.possible_mutations[j]


def init_parameters(args):
    config = ConfigParser.ConfigParser()
    config.read(args.config)
    alignment = AlignIO.read(args.alignment, 'fasta')
    ev_couplings = EVcouplings(args.eij)
    return config, alignment, ev_couplings

def command_line():
    parser = argparse.ArgumentParser(
        description='Preparation and generation of input files ' +
                    'used to de-immunize an amino acid sequence')
    parser.add_argument('--config', '-c', required=True,
                        help='Config File')
    parser.add_argument('--eij', '-e', required=True,
                        help='Eij File')
    parser.add_argument('--alignment', '-a', required=True,
                        help='The complete alignment generated by EVFold with upper and lower letters. ' +
                             'The sequence to be deimmunized must be the first in the alignment.')
    parser.add_argument('--out', '-o', required=True,
                        help='The output file of the data model (in AMPL/GMPL) format')
    parser.add_argument('--model', '-m', required=True, nargs=2,
                        help='The ILP model files in MathProg (first argument: imm, second argument: en)')
    args = parser.parse_args()

    deimmu = DeimmuPreparation(*init_parameters(args))
    deimmu.to_data_file(args.out)
    deimmu.generate_lp_files(args.out, args.model)

if __name__ == '__main__':
    command_line()
